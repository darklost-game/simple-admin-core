// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-core/rpc/ent/logoperation"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
)

// LogOperationDelete is the builder for deleting a LogOperation entity.
type LogOperationDelete struct {
	config
	hooks    []Hook
	mutation *LogOperationMutation
}

// Where appends a list predicates to the LogOperationDelete builder.
func (lod *LogOperationDelete) Where(ps ...predicate.LogOperation) *LogOperationDelete {
	lod.mutation.Where(ps...)
	return lod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lod *LogOperationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lod.sqlExec, lod.mutation, lod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lod *LogOperationDelete) ExecX(ctx context.Context) int {
	n, err := lod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lod *LogOperationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(logoperation.Table, sqlgraph.NewFieldSpec(logoperation.FieldID, field.TypeUint64))
	if ps := lod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lod.mutation.done = true
	return affected, err
}

// LogOperationDeleteOne is the builder for deleting a single LogOperation entity.
type LogOperationDeleteOne struct {
	lod *LogOperationDelete
}

// Where appends a list predicates to the LogOperationDelete builder.
func (lodo *LogOperationDeleteOne) Where(ps ...predicate.LogOperation) *LogOperationDeleteOne {
	lodo.lod.mutation.Where(ps...)
	return lodo
}

// Exec executes the deletion query.
func (lodo *LogOperationDeleteOne) Exec(ctx context.Context) error {
	n, err := lodo.lod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{logoperation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lodo *LogOperationDeleteOne) ExecX(ctx context.Context) {
	if err := lodo.Exec(ctx); err != nil {
		panic(err)
	}
}
