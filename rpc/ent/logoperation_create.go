// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-core/rpc/ent/logoperation"
	"github.com/suyuan32/simple-admin-core/rpc/ent/user"
)

// LogOperationCreate is the builder for creating a LogOperation entity.
type LogOperationCreate struct {
	config
	mutation *LogOperationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (loc *LogOperationCreate) SetCreatedAt(t time.Time) *LogOperationCreate {
	loc.mutation.SetCreatedAt(t)
	return loc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (loc *LogOperationCreate) SetNillableCreatedAt(t *time.Time) *LogOperationCreate {
	if t != nil {
		loc.SetCreatedAt(*t)
	}
	return loc
}

// SetUpdatedAt sets the "updated_at" field.
func (loc *LogOperationCreate) SetUpdatedAt(t time.Time) *LogOperationCreate {
	loc.mutation.SetUpdatedAt(t)
	return loc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (loc *LogOperationCreate) SetNillableUpdatedAt(t *time.Time) *LogOperationCreate {
	if t != nil {
		loc.SetUpdatedAt(*t)
	}
	return loc
}

// SetUUID sets the "uuid" field.
func (loc *LogOperationCreate) SetUUID(u uuid.UUID) *LogOperationCreate {
	loc.mutation.SetUUID(u)
	return loc
}

// SetMethod sets the "method" field.
func (loc *LogOperationCreate) SetMethod(s string) *LogOperationCreate {
	loc.mutation.SetMethod(s)
	return loc
}

// SetPath sets the "path" field.
func (loc *LogOperationCreate) SetPath(s string) *LogOperationCreate {
	loc.mutation.SetPath(s)
	return loc
}

// SetHeaders sets the "headers" field.
func (loc *LogOperationCreate) SetHeaders(s string) *LogOperationCreate {
	loc.mutation.SetHeaders(s)
	return loc
}

// SetBody sets the "body" field.
func (loc *LogOperationCreate) SetBody(s string) *LogOperationCreate {
	loc.mutation.SetBody(s)
	return loc
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (loc *LogOperationCreate) SetNillableBody(s *string) *LogOperationCreate {
	if s != nil {
		loc.SetBody(*s)
	}
	return loc
}

// SetStatusCode sets the "status_code" field.
func (loc *LogOperationCreate) SetStatusCode(i int) *LogOperationCreate {
	loc.mutation.SetStatusCode(i)
	return loc
}

// SetResHeaders sets the "res_headers" field.
func (loc *LogOperationCreate) SetResHeaders(s string) *LogOperationCreate {
	loc.mutation.SetResHeaders(s)
	return loc
}

// SetResBody sets the "res_body" field.
func (loc *LogOperationCreate) SetResBody(s string) *LogOperationCreate {
	loc.mutation.SetResBody(s)
	return loc
}

// SetNillableResBody sets the "res_body" field if the given value is not nil.
func (loc *LogOperationCreate) SetNillableResBody(s *string) *LogOperationCreate {
	if s != nil {
		loc.SetResBody(*s)
	}
	return loc
}

// SetReqTime sets the "req_time" field.
func (loc *LogOperationCreate) SetReqTime(t time.Time) *LogOperationCreate {
	loc.mutation.SetReqTime(t)
	return loc
}

// SetNillableReqTime sets the "req_time" field if the given value is not nil.
func (loc *LogOperationCreate) SetNillableReqTime(t *time.Time) *LogOperationCreate {
	if t != nil {
		loc.SetReqTime(*t)
	}
	return loc
}

// SetResTime sets the "res_time" field.
func (loc *LogOperationCreate) SetResTime(t time.Time) *LogOperationCreate {
	loc.mutation.SetResTime(t)
	return loc
}

// SetNillableResTime sets the "res_time" field if the given value is not nil.
func (loc *LogOperationCreate) SetNillableResTime(t *time.Time) *LogOperationCreate {
	if t != nil {
		loc.SetResTime(*t)
	}
	return loc
}

// SetCostTime sets the "cost_time" field.
func (loc *LogOperationCreate) SetCostTime(u uint64) *LogOperationCreate {
	loc.mutation.SetCostTime(u)
	return loc
}

// SetID sets the "id" field.
func (loc *LogOperationCreate) SetID(u uint64) *LogOperationCreate {
	loc.mutation.SetID(u)
	return loc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (loc *LogOperationCreate) SetUserID(id uuid.UUID) *LogOperationCreate {
	loc.mutation.SetUserID(id)
	return loc
}

// SetUser sets the "user" edge to the User entity.
func (loc *LogOperationCreate) SetUser(u *User) *LogOperationCreate {
	return loc.SetUserID(u.ID)
}

// Mutation returns the LogOperationMutation object of the builder.
func (loc *LogOperationCreate) Mutation() *LogOperationMutation {
	return loc.mutation
}

// Save creates the LogOperation in the database.
func (loc *LogOperationCreate) Save(ctx context.Context) (*LogOperation, error) {
	loc.defaults()
	return withHooks(ctx, loc.sqlSave, loc.mutation, loc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (loc *LogOperationCreate) SaveX(ctx context.Context) *LogOperation {
	v, err := loc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (loc *LogOperationCreate) Exec(ctx context.Context) error {
	_, err := loc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (loc *LogOperationCreate) ExecX(ctx context.Context) {
	if err := loc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (loc *LogOperationCreate) defaults() {
	if _, ok := loc.mutation.CreatedAt(); !ok {
		v := logoperation.DefaultCreatedAt()
		loc.mutation.SetCreatedAt(v)
	}
	if _, ok := loc.mutation.UpdatedAt(); !ok {
		v := logoperation.DefaultUpdatedAt()
		loc.mutation.SetUpdatedAt(v)
	}
	if _, ok := loc.mutation.ReqTime(); !ok {
		v := logoperation.DefaultReqTime()
		loc.mutation.SetReqTime(v)
	}
	if _, ok := loc.mutation.ResTime(); !ok {
		v := logoperation.DefaultResTime()
		loc.mutation.SetResTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (loc *LogOperationCreate) check() error {
	if _, ok := loc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LogOperation.created_at"`)}
	}
	if _, ok := loc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LogOperation.updated_at"`)}
	}
	if _, ok := loc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "LogOperation.uuid"`)}
	}
	if _, ok := loc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "LogOperation.method"`)}
	}
	if _, ok := loc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "LogOperation.path"`)}
	}
	if _, ok := loc.mutation.Headers(); !ok {
		return &ValidationError{Name: "headers", err: errors.New(`ent: missing required field "LogOperation.headers"`)}
	}
	if v, ok := loc.mutation.Headers(); ok {
		if err := logoperation.HeadersValidator(v); err != nil {
			return &ValidationError{Name: "headers", err: fmt.Errorf(`ent: validator failed for field "LogOperation.headers": %w`, err)}
		}
	}
	if _, ok := loc.mutation.StatusCode(); !ok {
		return &ValidationError{Name: "status_code", err: errors.New(`ent: missing required field "LogOperation.status_code"`)}
	}
	if _, ok := loc.mutation.ResHeaders(); !ok {
		return &ValidationError{Name: "res_headers", err: errors.New(`ent: missing required field "LogOperation.res_headers"`)}
	}
	if v, ok := loc.mutation.ResHeaders(); ok {
		if err := logoperation.ResHeadersValidator(v); err != nil {
			return &ValidationError{Name: "res_headers", err: fmt.Errorf(`ent: validator failed for field "LogOperation.res_headers": %w`, err)}
		}
	}
	if _, ok := loc.mutation.ReqTime(); !ok {
		return &ValidationError{Name: "req_time", err: errors.New(`ent: missing required field "LogOperation.req_time"`)}
	}
	if _, ok := loc.mutation.ResTime(); !ok {
		return &ValidationError{Name: "res_time", err: errors.New(`ent: missing required field "LogOperation.res_time"`)}
	}
	if _, ok := loc.mutation.CostTime(); !ok {
		return &ValidationError{Name: "cost_time", err: errors.New(`ent: missing required field "LogOperation.cost_time"`)}
	}
	if _, ok := loc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "LogOperation.user"`)}
	}
	return nil
}

func (loc *LogOperationCreate) sqlSave(ctx context.Context) (*LogOperation, error) {
	if err := loc.check(); err != nil {
		return nil, err
	}
	_node, _spec := loc.createSpec()
	if err := sqlgraph.CreateNode(ctx, loc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	loc.mutation.id = &_node.ID
	loc.mutation.done = true
	return _node, nil
}

func (loc *LogOperationCreate) createSpec() (*LogOperation, *sqlgraph.CreateSpec) {
	var (
		_node = &LogOperation{config: loc.config}
		_spec = sqlgraph.NewCreateSpec(logoperation.Table, sqlgraph.NewFieldSpec(logoperation.FieldID, field.TypeUint64))
	)
	if id, ok := loc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := loc.mutation.CreatedAt(); ok {
		_spec.SetField(logoperation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := loc.mutation.UpdatedAt(); ok {
		_spec.SetField(logoperation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := loc.mutation.Method(); ok {
		_spec.SetField(logoperation.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := loc.mutation.Path(); ok {
		_spec.SetField(logoperation.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := loc.mutation.Headers(); ok {
		_spec.SetField(logoperation.FieldHeaders, field.TypeString, value)
		_node.Headers = value
	}
	if value, ok := loc.mutation.Body(); ok {
		_spec.SetField(logoperation.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := loc.mutation.StatusCode(); ok {
		_spec.SetField(logoperation.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = value
	}
	if value, ok := loc.mutation.ResHeaders(); ok {
		_spec.SetField(logoperation.FieldResHeaders, field.TypeString, value)
		_node.ResHeaders = value
	}
	if value, ok := loc.mutation.ResBody(); ok {
		_spec.SetField(logoperation.FieldResBody, field.TypeString, value)
		_node.ResBody = value
	}
	if value, ok := loc.mutation.ReqTime(); ok {
		_spec.SetField(logoperation.FieldReqTime, field.TypeTime, value)
		_node.ReqTime = value
	}
	if value, ok := loc.mutation.ResTime(); ok {
		_spec.SetField(logoperation.FieldResTime, field.TypeTime, value)
		_node.ResTime = value
	}
	if value, ok := loc.mutation.CostTime(); ok {
		_spec.SetField(logoperation.FieldCostTime, field.TypeUint64, value)
		_node.CostTime = value
	}
	if nodes := loc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   logoperation.UserTable,
			Columns: []string{logoperation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LogOperationCreateBulk is the builder for creating many LogOperation entities in bulk.
type LogOperationCreateBulk struct {
	config
	err      error
	builders []*LogOperationCreate
}

// Save creates the LogOperation entities in the database.
func (locb *LogOperationCreateBulk) Save(ctx context.Context) ([]*LogOperation, error) {
	if locb.err != nil {
		return nil, locb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(locb.builders))
	nodes := make([]*LogOperation, len(locb.builders))
	mutators := make([]Mutator, len(locb.builders))
	for i := range locb.builders {
		func(i int, root context.Context) {
			builder := locb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogOperationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, locb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, locb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, locb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (locb *LogOperationCreateBulk) SaveX(ctx context.Context) []*LogOperation {
	v, err := locb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (locb *LogOperationCreateBulk) Exec(ctx context.Context) error {
	_, err := locb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (locb *LogOperationCreateBulk) ExecX(ctx context.Context) {
	if err := locb.Exec(ctx); err != nil {
		panic(err)
	}
}
