// Code generated by ent, DO NOT EDIT.

package loglogin

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldUpdatedAt, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldUUID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldType, v))
}

// AuthID applies equality check predicate on the "auth_id" field. It's identical to AuthIDEQ.
func AuthID(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldAuthID, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldIP, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldLocation, v))
}

// Device applies equality check predicate on the "device" field. It's identical to DeviceEQ.
func Device(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldDevice, v))
}

// Browser applies equality check predicate on the "browser" field. It's identical to BrowserEQ.
func Browser(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldBrowser, v))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldOs, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldResult, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldMessage, v))
}

// LoginAt applies equality check predicate on the "login_at" field. It's identical to LoginAtEQ.
func LoginAt(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldLoginAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldUpdatedAt, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDIsNil applies the IsNil predicate on the "uuid" field.
func UUIDIsNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIsNull(FieldUUID))
}

// UUIDNotNil applies the NotNil predicate on the "uuid" field.
func UUIDNotNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotNull(FieldUUID))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContainsFold(FieldType, v))
}

// AuthIDEQ applies the EQ predicate on the "auth_id" field.
func AuthIDEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldAuthID, v))
}

// AuthIDNEQ applies the NEQ predicate on the "auth_id" field.
func AuthIDNEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldAuthID, v))
}

// AuthIDIn applies the In predicate on the "auth_id" field.
func AuthIDIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldAuthID, vs...))
}

// AuthIDNotIn applies the NotIn predicate on the "auth_id" field.
func AuthIDNotIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldAuthID, vs...))
}

// AuthIDGT applies the GT predicate on the "auth_id" field.
func AuthIDGT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldAuthID, v))
}

// AuthIDGTE applies the GTE predicate on the "auth_id" field.
func AuthIDGTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldAuthID, v))
}

// AuthIDLT applies the LT predicate on the "auth_id" field.
func AuthIDLT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldAuthID, v))
}

// AuthIDLTE applies the LTE predicate on the "auth_id" field.
func AuthIDLTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldAuthID, v))
}

// AuthIDContains applies the Contains predicate on the "auth_id" field.
func AuthIDContains(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContains(FieldAuthID, v))
}

// AuthIDHasPrefix applies the HasPrefix predicate on the "auth_id" field.
func AuthIDHasPrefix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasPrefix(FieldAuthID, v))
}

// AuthIDHasSuffix applies the HasSuffix predicate on the "auth_id" field.
func AuthIDHasSuffix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasSuffix(FieldAuthID, v))
}

// AuthIDEqualFold applies the EqualFold predicate on the "auth_id" field.
func AuthIDEqualFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEqualFold(FieldAuthID, v))
}

// AuthIDContainsFold applies the ContainsFold predicate on the "auth_id" field.
func AuthIDContainsFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContainsFold(FieldAuthID, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContainsFold(FieldIP, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContainsFold(FieldLocation, v))
}

// DeviceEQ applies the EQ predicate on the "device" field.
func DeviceEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldDevice, v))
}

// DeviceNEQ applies the NEQ predicate on the "device" field.
func DeviceNEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldDevice, v))
}

// DeviceIn applies the In predicate on the "device" field.
func DeviceIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldDevice, vs...))
}

// DeviceNotIn applies the NotIn predicate on the "device" field.
func DeviceNotIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldDevice, vs...))
}

// DeviceGT applies the GT predicate on the "device" field.
func DeviceGT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldDevice, v))
}

// DeviceGTE applies the GTE predicate on the "device" field.
func DeviceGTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldDevice, v))
}

// DeviceLT applies the LT predicate on the "device" field.
func DeviceLT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldDevice, v))
}

// DeviceLTE applies the LTE predicate on the "device" field.
func DeviceLTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldDevice, v))
}

// DeviceContains applies the Contains predicate on the "device" field.
func DeviceContains(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContains(FieldDevice, v))
}

// DeviceHasPrefix applies the HasPrefix predicate on the "device" field.
func DeviceHasPrefix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasPrefix(FieldDevice, v))
}

// DeviceHasSuffix applies the HasSuffix predicate on the "device" field.
func DeviceHasSuffix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasSuffix(FieldDevice, v))
}

// DeviceIsNil applies the IsNil predicate on the "device" field.
func DeviceIsNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIsNull(FieldDevice))
}

// DeviceNotNil applies the NotNil predicate on the "device" field.
func DeviceNotNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotNull(FieldDevice))
}

// DeviceEqualFold applies the EqualFold predicate on the "device" field.
func DeviceEqualFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEqualFold(FieldDevice, v))
}

// DeviceContainsFold applies the ContainsFold predicate on the "device" field.
func DeviceContainsFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContainsFold(FieldDevice, v))
}

// BrowserEQ applies the EQ predicate on the "browser" field.
func BrowserEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldBrowser, v))
}

// BrowserNEQ applies the NEQ predicate on the "browser" field.
func BrowserNEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldBrowser, v))
}

// BrowserIn applies the In predicate on the "browser" field.
func BrowserIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldBrowser, vs...))
}

// BrowserNotIn applies the NotIn predicate on the "browser" field.
func BrowserNotIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldBrowser, vs...))
}

// BrowserGT applies the GT predicate on the "browser" field.
func BrowserGT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldBrowser, v))
}

// BrowserGTE applies the GTE predicate on the "browser" field.
func BrowserGTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldBrowser, v))
}

// BrowserLT applies the LT predicate on the "browser" field.
func BrowserLT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldBrowser, v))
}

// BrowserLTE applies the LTE predicate on the "browser" field.
func BrowserLTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldBrowser, v))
}

// BrowserContains applies the Contains predicate on the "browser" field.
func BrowserContains(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContains(FieldBrowser, v))
}

// BrowserHasPrefix applies the HasPrefix predicate on the "browser" field.
func BrowserHasPrefix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasPrefix(FieldBrowser, v))
}

// BrowserHasSuffix applies the HasSuffix predicate on the "browser" field.
func BrowserHasSuffix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasSuffix(FieldBrowser, v))
}

// BrowserIsNil applies the IsNil predicate on the "browser" field.
func BrowserIsNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIsNull(FieldBrowser))
}

// BrowserNotNil applies the NotNil predicate on the "browser" field.
func BrowserNotNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotNull(FieldBrowser))
}

// BrowserEqualFold applies the EqualFold predicate on the "browser" field.
func BrowserEqualFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEqualFold(FieldBrowser, v))
}

// BrowserContainsFold applies the ContainsFold predicate on the "browser" field.
func BrowserContainsFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContainsFold(FieldBrowser, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasSuffix(FieldOs, v))
}

// OsIsNil applies the IsNil predicate on the "os" field.
func OsIsNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIsNull(FieldOs))
}

// OsNotNil applies the NotNil predicate on the "os" field.
func OsNotNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotNull(FieldOs))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContainsFold(FieldOs, v))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldResult, v))
}

// ResultContains applies the Contains predicate on the "result" field.
func ResultContains(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContains(FieldResult, v))
}

// ResultHasPrefix applies the HasPrefix predicate on the "result" field.
func ResultHasPrefix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasPrefix(FieldResult, v))
}

// ResultHasSuffix applies the HasSuffix predicate on the "result" field.
func ResultHasSuffix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasSuffix(FieldResult, v))
}

// ResultEqualFold applies the EqualFold predicate on the "result" field.
func ResultEqualFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEqualFold(FieldResult, v))
}

// ResultContainsFold applies the ContainsFold predicate on the "result" field.
func ResultContainsFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContainsFold(FieldResult, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldContainsFold(FieldMessage, v))
}

// LoginAtEQ applies the EQ predicate on the "login_at" field.
func LoginAtEQ(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldEQ(FieldLoginAt, v))
}

// LoginAtNEQ applies the NEQ predicate on the "login_at" field.
func LoginAtNEQ(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNEQ(FieldLoginAt, v))
}

// LoginAtIn applies the In predicate on the "login_at" field.
func LoginAtIn(vs ...time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldIn(FieldLoginAt, vs...))
}

// LoginAtNotIn applies the NotIn predicate on the "login_at" field.
func LoginAtNotIn(vs ...time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldNotIn(FieldLoginAt, vs...))
}

// LoginAtGT applies the GT predicate on the "login_at" field.
func LoginAtGT(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGT(FieldLoginAt, v))
}

// LoginAtGTE applies the GTE predicate on the "login_at" field.
func LoginAtGTE(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldGTE(FieldLoginAt, v))
}

// LoginAtLT applies the LT predicate on the "login_at" field.
func LoginAtLT(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLT(FieldLoginAt, v))
}

// LoginAtLTE applies the LTE predicate on the "login_at" field.
func LoginAtLTE(v time.Time) predicate.LogLogin {
	return predicate.LogLogin(sql.FieldLTE(FieldLoginAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.LogLogin {
	return predicate.LogLogin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.LogLogin {
	return predicate.LogLogin(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LogLogin) predicate.LogLogin {
	return predicate.LogLogin(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LogLogin) predicate.LogLogin {
	return predicate.LogLogin(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LogLogin) predicate.LogLogin {
	return predicate.LogLogin(sql.NotPredicates(p))
}
