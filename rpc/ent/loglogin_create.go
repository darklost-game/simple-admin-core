// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-core/rpc/ent/loglogin"
	"github.com/suyuan32/simple-admin-core/rpc/ent/user"
)

// LogLoginCreate is the builder for creating a LogLogin entity.
type LogLoginCreate struct {
	config
	mutation *LogLoginMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (llc *LogLoginCreate) SetCreatedAt(t time.Time) *LogLoginCreate {
	llc.mutation.SetCreatedAt(t)
	return llc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (llc *LogLoginCreate) SetNillableCreatedAt(t *time.Time) *LogLoginCreate {
	if t != nil {
		llc.SetCreatedAt(*t)
	}
	return llc
}

// SetUpdatedAt sets the "updated_at" field.
func (llc *LogLoginCreate) SetUpdatedAt(t time.Time) *LogLoginCreate {
	llc.mutation.SetUpdatedAt(t)
	return llc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (llc *LogLoginCreate) SetNillableUpdatedAt(t *time.Time) *LogLoginCreate {
	if t != nil {
		llc.SetUpdatedAt(*t)
	}
	return llc
}

// SetUUID sets the "uuid" field.
func (llc *LogLoginCreate) SetUUID(u uuid.UUID) *LogLoginCreate {
	llc.mutation.SetUUID(u)
	return llc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (llc *LogLoginCreate) SetNillableUUID(u *uuid.UUID) *LogLoginCreate {
	if u != nil {
		llc.SetUUID(*u)
	}
	return llc
}

// SetType sets the "type" field.
func (llc *LogLoginCreate) SetType(s string) *LogLoginCreate {
	llc.mutation.SetType(s)
	return llc
}

// SetAuthID sets the "auth_id" field.
func (llc *LogLoginCreate) SetAuthID(s string) *LogLoginCreate {
	llc.mutation.SetAuthID(s)
	return llc
}

// SetIP sets the "ip" field.
func (llc *LogLoginCreate) SetIP(s string) *LogLoginCreate {
	llc.mutation.SetIP(s)
	return llc
}

// SetLocation sets the "location" field.
func (llc *LogLoginCreate) SetLocation(s string) *LogLoginCreate {
	llc.mutation.SetLocation(s)
	return llc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (llc *LogLoginCreate) SetNillableLocation(s *string) *LogLoginCreate {
	if s != nil {
		llc.SetLocation(*s)
	}
	return llc
}

// SetDevice sets the "device" field.
func (llc *LogLoginCreate) SetDevice(s string) *LogLoginCreate {
	llc.mutation.SetDevice(s)
	return llc
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (llc *LogLoginCreate) SetNillableDevice(s *string) *LogLoginCreate {
	if s != nil {
		llc.SetDevice(*s)
	}
	return llc
}

// SetBrowser sets the "browser" field.
func (llc *LogLoginCreate) SetBrowser(s string) *LogLoginCreate {
	llc.mutation.SetBrowser(s)
	return llc
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (llc *LogLoginCreate) SetNillableBrowser(s *string) *LogLoginCreate {
	if s != nil {
		llc.SetBrowser(*s)
	}
	return llc
}

// SetOs sets the "os" field.
func (llc *LogLoginCreate) SetOs(s string) *LogLoginCreate {
	llc.mutation.SetOs(s)
	return llc
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (llc *LogLoginCreate) SetNillableOs(s *string) *LogLoginCreate {
	if s != nil {
		llc.SetOs(*s)
	}
	return llc
}

// SetResult sets the "result" field.
func (llc *LogLoginCreate) SetResult(s string) *LogLoginCreate {
	llc.mutation.SetResult(s)
	return llc
}

// SetMessage sets the "message" field.
func (llc *LogLoginCreate) SetMessage(s string) *LogLoginCreate {
	llc.mutation.SetMessage(s)
	return llc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (llc *LogLoginCreate) SetNillableMessage(s *string) *LogLoginCreate {
	if s != nil {
		llc.SetMessage(*s)
	}
	return llc
}

// SetLoginAt sets the "login_at" field.
func (llc *LogLoginCreate) SetLoginAt(t time.Time) *LogLoginCreate {
	llc.mutation.SetLoginAt(t)
	return llc
}

// SetNillableLoginAt sets the "login_at" field if the given value is not nil.
func (llc *LogLoginCreate) SetNillableLoginAt(t *time.Time) *LogLoginCreate {
	if t != nil {
		llc.SetLoginAt(*t)
	}
	return llc
}

// SetID sets the "id" field.
func (llc *LogLoginCreate) SetID(u uint64) *LogLoginCreate {
	llc.mutation.SetID(u)
	return llc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (llc *LogLoginCreate) SetUserID(id uuid.UUID) *LogLoginCreate {
	llc.mutation.SetUserID(id)
	return llc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (llc *LogLoginCreate) SetNillableUserID(id *uuid.UUID) *LogLoginCreate {
	if id != nil {
		llc = llc.SetUserID(*id)
	}
	return llc
}

// SetUser sets the "user" edge to the User entity.
func (llc *LogLoginCreate) SetUser(u *User) *LogLoginCreate {
	return llc.SetUserID(u.ID)
}

// Mutation returns the LogLoginMutation object of the builder.
func (llc *LogLoginCreate) Mutation() *LogLoginMutation {
	return llc.mutation
}

// Save creates the LogLogin in the database.
func (llc *LogLoginCreate) Save(ctx context.Context) (*LogLogin, error) {
	llc.defaults()
	return withHooks(ctx, llc.sqlSave, llc.mutation, llc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (llc *LogLoginCreate) SaveX(ctx context.Context) *LogLogin {
	v, err := llc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (llc *LogLoginCreate) Exec(ctx context.Context) error {
	_, err := llc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llc *LogLoginCreate) ExecX(ctx context.Context) {
	if err := llc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (llc *LogLoginCreate) defaults() {
	if _, ok := llc.mutation.CreatedAt(); !ok {
		v := loglogin.DefaultCreatedAt()
		llc.mutation.SetCreatedAt(v)
	}
	if _, ok := llc.mutation.UpdatedAt(); !ok {
		v := loglogin.DefaultUpdatedAt()
		llc.mutation.SetUpdatedAt(v)
	}
	if _, ok := llc.mutation.LoginAt(); !ok {
		v := loglogin.DefaultLoginAt()
		llc.mutation.SetLoginAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (llc *LogLoginCreate) check() error {
	if _, ok := llc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LogLogin.created_at"`)}
	}
	if _, ok := llc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LogLogin.updated_at"`)}
	}
	if _, ok := llc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "LogLogin.type"`)}
	}
	if _, ok := llc.mutation.AuthID(); !ok {
		return &ValidationError{Name: "auth_id", err: errors.New(`ent: missing required field "LogLogin.auth_id"`)}
	}
	if _, ok := llc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "LogLogin.ip"`)}
	}
	if _, ok := llc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`ent: missing required field "LogLogin.result"`)}
	}
	if _, ok := llc.mutation.LoginAt(); !ok {
		return &ValidationError{Name: "login_at", err: errors.New(`ent: missing required field "LogLogin.login_at"`)}
	}
	return nil
}

func (llc *LogLoginCreate) sqlSave(ctx context.Context) (*LogLogin, error) {
	if err := llc.check(); err != nil {
		return nil, err
	}
	_node, _spec := llc.createSpec()
	if err := sqlgraph.CreateNode(ctx, llc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	llc.mutation.id = &_node.ID
	llc.mutation.done = true
	return _node, nil
}

func (llc *LogLoginCreate) createSpec() (*LogLogin, *sqlgraph.CreateSpec) {
	var (
		_node = &LogLogin{config: llc.config}
		_spec = sqlgraph.NewCreateSpec(loglogin.Table, sqlgraph.NewFieldSpec(loglogin.FieldID, field.TypeUint64))
	)
	if id, ok := llc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := llc.mutation.CreatedAt(); ok {
		_spec.SetField(loglogin.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := llc.mutation.UpdatedAt(); ok {
		_spec.SetField(loglogin.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := llc.mutation.GetType(); ok {
		_spec.SetField(loglogin.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := llc.mutation.AuthID(); ok {
		_spec.SetField(loglogin.FieldAuthID, field.TypeString, value)
		_node.AuthID = value
	}
	if value, ok := llc.mutation.IP(); ok {
		_spec.SetField(loglogin.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := llc.mutation.Location(); ok {
		_spec.SetField(loglogin.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := llc.mutation.Device(); ok {
		_spec.SetField(loglogin.FieldDevice, field.TypeString, value)
		_node.Device = value
	}
	if value, ok := llc.mutation.Browser(); ok {
		_spec.SetField(loglogin.FieldBrowser, field.TypeString, value)
		_node.Browser = value
	}
	if value, ok := llc.mutation.Os(); ok {
		_spec.SetField(loglogin.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := llc.mutation.Result(); ok {
		_spec.SetField(loglogin.FieldResult, field.TypeString, value)
		_node.Result = value
	}
	if value, ok := llc.mutation.Message(); ok {
		_spec.SetField(loglogin.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := llc.mutation.LoginAt(); ok {
		_spec.SetField(loglogin.FieldLoginAt, field.TypeTime, value)
		_node.LoginAt = value
	}
	if nodes := llc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loglogin.UserTable,
			Columns: []string{loglogin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UUID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LogLoginCreateBulk is the builder for creating many LogLogin entities in bulk.
type LogLoginCreateBulk struct {
	config
	err      error
	builders []*LogLoginCreate
}

// Save creates the LogLogin entities in the database.
func (llcb *LogLoginCreateBulk) Save(ctx context.Context) ([]*LogLogin, error) {
	if llcb.err != nil {
		return nil, llcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(llcb.builders))
	nodes := make([]*LogLogin, len(llcb.builders))
	mutators := make([]Mutator, len(llcb.builders))
	for i := range llcb.builders {
		func(i int, root context.Context) {
			builder := llcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogLoginMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, llcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, llcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, llcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (llcb *LogLoginCreateBulk) SaveX(ctx context.Context) []*LogLogin {
	v, err := llcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (llcb *LogLoginCreateBulk) Exec(ctx context.Context) error {
	_, err := llcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llcb *LogLoginCreateBulk) ExecX(ctx context.Context) {
	if err := llcb.Exec(ctx); err != nil {
		panic(err)
	}
}
