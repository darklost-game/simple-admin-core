// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-core/rpc/ent/loglogin"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
	"github.com/suyuan32/simple-admin-core/rpc/ent/user"
)

// LogLoginUpdate is the builder for updating LogLogin entities.
type LogLoginUpdate struct {
	config
	hooks     []Hook
	mutation  *LogLoginMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LogLoginUpdate builder.
func (llu *LogLoginUpdate) Where(ps ...predicate.LogLogin) *LogLoginUpdate {
	llu.mutation.Where(ps...)
	return llu
}

// SetUpdatedAt sets the "updated_at" field.
func (llu *LogLoginUpdate) SetUpdatedAt(t time.Time) *LogLoginUpdate {
	llu.mutation.SetUpdatedAt(t)
	return llu
}

// SetUUID sets the "uuid" field.
func (llu *LogLoginUpdate) SetUUID(u uuid.UUID) *LogLoginUpdate {
	llu.mutation.SetUUID(u)
	return llu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableUUID(u *uuid.UUID) *LogLoginUpdate {
	if u != nil {
		llu.SetUUID(*u)
	}
	return llu
}

// ClearUUID clears the value of the "uuid" field.
func (llu *LogLoginUpdate) ClearUUID() *LogLoginUpdate {
	llu.mutation.ClearUUID()
	return llu
}

// SetType sets the "type" field.
func (llu *LogLoginUpdate) SetType(s string) *LogLoginUpdate {
	llu.mutation.SetType(s)
	return llu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableType(s *string) *LogLoginUpdate {
	if s != nil {
		llu.SetType(*s)
	}
	return llu
}

// SetAuthID sets the "auth_id" field.
func (llu *LogLoginUpdate) SetAuthID(s string) *LogLoginUpdate {
	llu.mutation.SetAuthID(s)
	return llu
}

// SetNillableAuthID sets the "auth_id" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableAuthID(s *string) *LogLoginUpdate {
	if s != nil {
		llu.SetAuthID(*s)
	}
	return llu
}

// SetIP sets the "ip" field.
func (llu *LogLoginUpdate) SetIP(s string) *LogLoginUpdate {
	llu.mutation.SetIP(s)
	return llu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableIP(s *string) *LogLoginUpdate {
	if s != nil {
		llu.SetIP(*s)
	}
	return llu
}

// SetLocation sets the "location" field.
func (llu *LogLoginUpdate) SetLocation(s string) *LogLoginUpdate {
	llu.mutation.SetLocation(s)
	return llu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableLocation(s *string) *LogLoginUpdate {
	if s != nil {
		llu.SetLocation(*s)
	}
	return llu
}

// ClearLocation clears the value of the "location" field.
func (llu *LogLoginUpdate) ClearLocation() *LogLoginUpdate {
	llu.mutation.ClearLocation()
	return llu
}

// SetDevice sets the "device" field.
func (llu *LogLoginUpdate) SetDevice(s string) *LogLoginUpdate {
	llu.mutation.SetDevice(s)
	return llu
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableDevice(s *string) *LogLoginUpdate {
	if s != nil {
		llu.SetDevice(*s)
	}
	return llu
}

// ClearDevice clears the value of the "device" field.
func (llu *LogLoginUpdate) ClearDevice() *LogLoginUpdate {
	llu.mutation.ClearDevice()
	return llu
}

// SetBrowser sets the "browser" field.
func (llu *LogLoginUpdate) SetBrowser(s string) *LogLoginUpdate {
	llu.mutation.SetBrowser(s)
	return llu
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableBrowser(s *string) *LogLoginUpdate {
	if s != nil {
		llu.SetBrowser(*s)
	}
	return llu
}

// ClearBrowser clears the value of the "browser" field.
func (llu *LogLoginUpdate) ClearBrowser() *LogLoginUpdate {
	llu.mutation.ClearBrowser()
	return llu
}

// SetOs sets the "os" field.
func (llu *LogLoginUpdate) SetOs(s string) *LogLoginUpdate {
	llu.mutation.SetOs(s)
	return llu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableOs(s *string) *LogLoginUpdate {
	if s != nil {
		llu.SetOs(*s)
	}
	return llu
}

// ClearOs clears the value of the "os" field.
func (llu *LogLoginUpdate) ClearOs() *LogLoginUpdate {
	llu.mutation.ClearOs()
	return llu
}

// SetResult sets the "result" field.
func (llu *LogLoginUpdate) SetResult(s string) *LogLoginUpdate {
	llu.mutation.SetResult(s)
	return llu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableResult(s *string) *LogLoginUpdate {
	if s != nil {
		llu.SetResult(*s)
	}
	return llu
}

// ClearResult clears the value of the "result" field.
func (llu *LogLoginUpdate) ClearResult() *LogLoginUpdate {
	llu.mutation.ClearResult()
	return llu
}

// SetMessage sets the "message" field.
func (llu *LogLoginUpdate) SetMessage(s string) *LogLoginUpdate {
	llu.mutation.SetMessage(s)
	return llu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableMessage(s *string) *LogLoginUpdate {
	if s != nil {
		llu.SetMessage(*s)
	}
	return llu
}

// ClearMessage clears the value of the "message" field.
func (llu *LogLoginUpdate) ClearMessage() *LogLoginUpdate {
	llu.mutation.ClearMessage()
	return llu
}

// SetLoginAt sets the "login_at" field.
func (llu *LogLoginUpdate) SetLoginAt(t time.Time) *LogLoginUpdate {
	llu.mutation.SetLoginAt(t)
	return llu
}

// SetNillableLoginAt sets the "login_at" field if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableLoginAt(t *time.Time) *LogLoginUpdate {
	if t != nil {
		llu.SetLoginAt(*t)
	}
	return llu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (llu *LogLoginUpdate) SetUserID(id uuid.UUID) *LogLoginUpdate {
	llu.mutation.SetUserID(id)
	return llu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (llu *LogLoginUpdate) SetNillableUserID(id *uuid.UUID) *LogLoginUpdate {
	if id != nil {
		llu = llu.SetUserID(*id)
	}
	return llu
}

// SetUser sets the "user" edge to the User entity.
func (llu *LogLoginUpdate) SetUser(u *User) *LogLoginUpdate {
	return llu.SetUserID(u.ID)
}

// Mutation returns the LogLoginMutation object of the builder.
func (llu *LogLoginUpdate) Mutation() *LogLoginMutation {
	return llu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (llu *LogLoginUpdate) ClearUser() *LogLoginUpdate {
	llu.mutation.ClearUser()
	return llu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (llu *LogLoginUpdate) Save(ctx context.Context) (int, error) {
	llu.defaults()
	return withHooks(ctx, llu.sqlSave, llu.mutation, llu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (llu *LogLoginUpdate) SaveX(ctx context.Context) int {
	affected, err := llu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (llu *LogLoginUpdate) Exec(ctx context.Context) error {
	_, err := llu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llu *LogLoginUpdate) ExecX(ctx context.Context) {
	if err := llu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (llu *LogLoginUpdate) defaults() {
	if _, ok := llu.mutation.UpdatedAt(); !ok {
		v := loglogin.UpdateDefaultUpdatedAt()
		llu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (llu *LogLoginUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LogLoginUpdate {
	llu.modifiers = append(llu.modifiers, modifiers...)
	return llu
}

func (llu *LogLoginUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(loglogin.Table, loglogin.Columns, sqlgraph.NewFieldSpec(loglogin.FieldID, field.TypeUint64))
	if ps := llu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := llu.mutation.UpdatedAt(); ok {
		_spec.SetField(loglogin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := llu.mutation.GetType(); ok {
		_spec.SetField(loglogin.FieldType, field.TypeString, value)
	}
	if value, ok := llu.mutation.AuthID(); ok {
		_spec.SetField(loglogin.FieldAuthID, field.TypeString, value)
	}
	if value, ok := llu.mutation.IP(); ok {
		_spec.SetField(loglogin.FieldIP, field.TypeString, value)
	}
	if value, ok := llu.mutation.Location(); ok {
		_spec.SetField(loglogin.FieldLocation, field.TypeString, value)
	}
	if llu.mutation.LocationCleared() {
		_spec.ClearField(loglogin.FieldLocation, field.TypeString)
	}
	if value, ok := llu.mutation.Device(); ok {
		_spec.SetField(loglogin.FieldDevice, field.TypeString, value)
	}
	if llu.mutation.DeviceCleared() {
		_spec.ClearField(loglogin.FieldDevice, field.TypeString)
	}
	if value, ok := llu.mutation.Browser(); ok {
		_spec.SetField(loglogin.FieldBrowser, field.TypeString, value)
	}
	if llu.mutation.BrowserCleared() {
		_spec.ClearField(loglogin.FieldBrowser, field.TypeString)
	}
	if value, ok := llu.mutation.Os(); ok {
		_spec.SetField(loglogin.FieldOs, field.TypeString, value)
	}
	if llu.mutation.OsCleared() {
		_spec.ClearField(loglogin.FieldOs, field.TypeString)
	}
	if value, ok := llu.mutation.Result(); ok {
		_spec.SetField(loglogin.FieldResult, field.TypeString, value)
	}
	if llu.mutation.ResultCleared() {
		_spec.ClearField(loglogin.FieldResult, field.TypeString)
	}
	if value, ok := llu.mutation.Message(); ok {
		_spec.SetField(loglogin.FieldMessage, field.TypeString, value)
	}
	if llu.mutation.MessageCleared() {
		_spec.ClearField(loglogin.FieldMessage, field.TypeString)
	}
	if value, ok := llu.mutation.LoginAt(); ok {
		_spec.SetField(loglogin.FieldLoginAt, field.TypeTime, value)
	}
	if llu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loglogin.UserTable,
			Columns: []string{loglogin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := llu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loglogin.UserTable,
			Columns: []string{loglogin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(llu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, llu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loglogin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	llu.mutation.done = true
	return n, nil
}

// LogLoginUpdateOne is the builder for updating a single LogLogin entity.
type LogLoginUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LogLoginMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (lluo *LogLoginUpdateOne) SetUpdatedAt(t time.Time) *LogLoginUpdateOne {
	lluo.mutation.SetUpdatedAt(t)
	return lluo
}

// SetUUID sets the "uuid" field.
func (lluo *LogLoginUpdateOne) SetUUID(u uuid.UUID) *LogLoginUpdateOne {
	lluo.mutation.SetUUID(u)
	return lluo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableUUID(u *uuid.UUID) *LogLoginUpdateOne {
	if u != nil {
		lluo.SetUUID(*u)
	}
	return lluo
}

// ClearUUID clears the value of the "uuid" field.
func (lluo *LogLoginUpdateOne) ClearUUID() *LogLoginUpdateOne {
	lluo.mutation.ClearUUID()
	return lluo
}

// SetType sets the "type" field.
func (lluo *LogLoginUpdateOne) SetType(s string) *LogLoginUpdateOne {
	lluo.mutation.SetType(s)
	return lluo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableType(s *string) *LogLoginUpdateOne {
	if s != nil {
		lluo.SetType(*s)
	}
	return lluo
}

// SetAuthID sets the "auth_id" field.
func (lluo *LogLoginUpdateOne) SetAuthID(s string) *LogLoginUpdateOne {
	lluo.mutation.SetAuthID(s)
	return lluo
}

// SetNillableAuthID sets the "auth_id" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableAuthID(s *string) *LogLoginUpdateOne {
	if s != nil {
		lluo.SetAuthID(*s)
	}
	return lluo
}

// SetIP sets the "ip" field.
func (lluo *LogLoginUpdateOne) SetIP(s string) *LogLoginUpdateOne {
	lluo.mutation.SetIP(s)
	return lluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableIP(s *string) *LogLoginUpdateOne {
	if s != nil {
		lluo.SetIP(*s)
	}
	return lluo
}

// SetLocation sets the "location" field.
func (lluo *LogLoginUpdateOne) SetLocation(s string) *LogLoginUpdateOne {
	lluo.mutation.SetLocation(s)
	return lluo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableLocation(s *string) *LogLoginUpdateOne {
	if s != nil {
		lluo.SetLocation(*s)
	}
	return lluo
}

// ClearLocation clears the value of the "location" field.
func (lluo *LogLoginUpdateOne) ClearLocation() *LogLoginUpdateOne {
	lluo.mutation.ClearLocation()
	return lluo
}

// SetDevice sets the "device" field.
func (lluo *LogLoginUpdateOne) SetDevice(s string) *LogLoginUpdateOne {
	lluo.mutation.SetDevice(s)
	return lluo
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableDevice(s *string) *LogLoginUpdateOne {
	if s != nil {
		lluo.SetDevice(*s)
	}
	return lluo
}

// ClearDevice clears the value of the "device" field.
func (lluo *LogLoginUpdateOne) ClearDevice() *LogLoginUpdateOne {
	lluo.mutation.ClearDevice()
	return lluo
}

// SetBrowser sets the "browser" field.
func (lluo *LogLoginUpdateOne) SetBrowser(s string) *LogLoginUpdateOne {
	lluo.mutation.SetBrowser(s)
	return lluo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableBrowser(s *string) *LogLoginUpdateOne {
	if s != nil {
		lluo.SetBrowser(*s)
	}
	return lluo
}

// ClearBrowser clears the value of the "browser" field.
func (lluo *LogLoginUpdateOne) ClearBrowser() *LogLoginUpdateOne {
	lluo.mutation.ClearBrowser()
	return lluo
}

// SetOs sets the "os" field.
func (lluo *LogLoginUpdateOne) SetOs(s string) *LogLoginUpdateOne {
	lluo.mutation.SetOs(s)
	return lluo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableOs(s *string) *LogLoginUpdateOne {
	if s != nil {
		lluo.SetOs(*s)
	}
	return lluo
}

// ClearOs clears the value of the "os" field.
func (lluo *LogLoginUpdateOne) ClearOs() *LogLoginUpdateOne {
	lluo.mutation.ClearOs()
	return lluo
}

// SetResult sets the "result" field.
func (lluo *LogLoginUpdateOne) SetResult(s string) *LogLoginUpdateOne {
	lluo.mutation.SetResult(s)
	return lluo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableResult(s *string) *LogLoginUpdateOne {
	if s != nil {
		lluo.SetResult(*s)
	}
	return lluo
}

// ClearResult clears the value of the "result" field.
func (lluo *LogLoginUpdateOne) ClearResult() *LogLoginUpdateOne {
	lluo.mutation.ClearResult()
	return lluo
}

// SetMessage sets the "message" field.
func (lluo *LogLoginUpdateOne) SetMessage(s string) *LogLoginUpdateOne {
	lluo.mutation.SetMessage(s)
	return lluo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableMessage(s *string) *LogLoginUpdateOne {
	if s != nil {
		lluo.SetMessage(*s)
	}
	return lluo
}

// ClearMessage clears the value of the "message" field.
func (lluo *LogLoginUpdateOne) ClearMessage() *LogLoginUpdateOne {
	lluo.mutation.ClearMessage()
	return lluo
}

// SetLoginAt sets the "login_at" field.
func (lluo *LogLoginUpdateOne) SetLoginAt(t time.Time) *LogLoginUpdateOne {
	lluo.mutation.SetLoginAt(t)
	return lluo
}

// SetNillableLoginAt sets the "login_at" field if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableLoginAt(t *time.Time) *LogLoginUpdateOne {
	if t != nil {
		lluo.SetLoginAt(*t)
	}
	return lluo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lluo *LogLoginUpdateOne) SetUserID(id uuid.UUID) *LogLoginUpdateOne {
	lluo.mutation.SetUserID(id)
	return lluo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (lluo *LogLoginUpdateOne) SetNillableUserID(id *uuid.UUID) *LogLoginUpdateOne {
	if id != nil {
		lluo = lluo.SetUserID(*id)
	}
	return lluo
}

// SetUser sets the "user" edge to the User entity.
func (lluo *LogLoginUpdateOne) SetUser(u *User) *LogLoginUpdateOne {
	return lluo.SetUserID(u.ID)
}

// Mutation returns the LogLoginMutation object of the builder.
func (lluo *LogLoginUpdateOne) Mutation() *LogLoginMutation {
	return lluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lluo *LogLoginUpdateOne) ClearUser() *LogLoginUpdateOne {
	lluo.mutation.ClearUser()
	return lluo
}

// Where appends a list predicates to the LogLoginUpdate builder.
func (lluo *LogLoginUpdateOne) Where(ps ...predicate.LogLogin) *LogLoginUpdateOne {
	lluo.mutation.Where(ps...)
	return lluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lluo *LogLoginUpdateOne) Select(field string, fields ...string) *LogLoginUpdateOne {
	lluo.fields = append([]string{field}, fields...)
	return lluo
}

// Save executes the query and returns the updated LogLogin entity.
func (lluo *LogLoginUpdateOne) Save(ctx context.Context) (*LogLogin, error) {
	lluo.defaults()
	return withHooks(ctx, lluo.sqlSave, lluo.mutation, lluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lluo *LogLoginUpdateOne) SaveX(ctx context.Context) *LogLogin {
	node, err := lluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lluo *LogLoginUpdateOne) Exec(ctx context.Context) error {
	_, err := lluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lluo *LogLoginUpdateOne) ExecX(ctx context.Context) {
	if err := lluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lluo *LogLoginUpdateOne) defaults() {
	if _, ok := lluo.mutation.UpdatedAt(); !ok {
		v := loglogin.UpdateDefaultUpdatedAt()
		lluo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lluo *LogLoginUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LogLoginUpdateOne {
	lluo.modifiers = append(lluo.modifiers, modifiers...)
	return lluo
}

func (lluo *LogLoginUpdateOne) sqlSave(ctx context.Context) (_node *LogLogin, err error) {
	_spec := sqlgraph.NewUpdateSpec(loglogin.Table, loglogin.Columns, sqlgraph.NewFieldSpec(loglogin.FieldID, field.TypeUint64))
	id, ok := lluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LogLogin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loglogin.FieldID)
		for _, f := range fields {
			if !loglogin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loglogin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lluo.mutation.UpdatedAt(); ok {
		_spec.SetField(loglogin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lluo.mutation.GetType(); ok {
		_spec.SetField(loglogin.FieldType, field.TypeString, value)
	}
	if value, ok := lluo.mutation.AuthID(); ok {
		_spec.SetField(loglogin.FieldAuthID, field.TypeString, value)
	}
	if value, ok := lluo.mutation.IP(); ok {
		_spec.SetField(loglogin.FieldIP, field.TypeString, value)
	}
	if value, ok := lluo.mutation.Location(); ok {
		_spec.SetField(loglogin.FieldLocation, field.TypeString, value)
	}
	if lluo.mutation.LocationCleared() {
		_spec.ClearField(loglogin.FieldLocation, field.TypeString)
	}
	if value, ok := lluo.mutation.Device(); ok {
		_spec.SetField(loglogin.FieldDevice, field.TypeString, value)
	}
	if lluo.mutation.DeviceCleared() {
		_spec.ClearField(loglogin.FieldDevice, field.TypeString)
	}
	if value, ok := lluo.mutation.Browser(); ok {
		_spec.SetField(loglogin.FieldBrowser, field.TypeString, value)
	}
	if lluo.mutation.BrowserCleared() {
		_spec.ClearField(loglogin.FieldBrowser, field.TypeString)
	}
	if value, ok := lluo.mutation.Os(); ok {
		_spec.SetField(loglogin.FieldOs, field.TypeString, value)
	}
	if lluo.mutation.OsCleared() {
		_spec.ClearField(loglogin.FieldOs, field.TypeString)
	}
	if value, ok := lluo.mutation.Result(); ok {
		_spec.SetField(loglogin.FieldResult, field.TypeString, value)
	}
	if lluo.mutation.ResultCleared() {
		_spec.ClearField(loglogin.FieldResult, field.TypeString)
	}
	if value, ok := lluo.mutation.Message(); ok {
		_spec.SetField(loglogin.FieldMessage, field.TypeString, value)
	}
	if lluo.mutation.MessageCleared() {
		_spec.ClearField(loglogin.FieldMessage, field.TypeString)
	}
	if value, ok := lluo.mutation.LoginAt(); ok {
		_spec.SetField(loglogin.FieldLoginAt, field.TypeTime, value)
	}
	if lluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loglogin.UserTable,
			Columns: []string{loglogin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loglogin.UserTable,
			Columns: []string{loglogin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lluo.modifiers...)
	_node = &LogLogin{config: lluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loglogin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lluo.mutation.done = true
	return _node, nil
}
